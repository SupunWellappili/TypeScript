(()=>{"use strict";var o={532:(o,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){let o;console.log("Hello Word!"),console.log("/////////////////////////////////////////////////////"),console.log("boolean"),console.log("number"),console.log("string"),console.log(typeof[5,5]),console.log(typeof[6,6]),console.log(typeof["Hello",!0]),function(o){o[o.GREEN=0]="GREEN",o[o.RED=1]="RED",o[o.ORANGE=2]="ORANGE"}(o||(o={}));const e=o.GREEN;console.log(typeof e),console.log("object"),console.log("undefined"),console.log(typeof{});const l=[1,"String",void 0,o.GREEN];console.log(typeof l),console.log("/////////////////////////////////////////////////////"),console.log("/////////////////////////////////////////////////////")},console.log("/////////////////////////////////////////////////////");class l{constructor(o){this.name=o}printName(){console.log(this.name)}static printClassName(){console.log(l.className)}}l.className="dog",new l("snoby").printName(),l.printClassName(),console.log("/////////////////////////////////////////////////////")},156:function(o,e,l){var n=this&&this.__importDefault||function(o){return o&&o.__esModule?o:{default:o}};Object.defineProperty(e,"__esModule",{value:!0}),(0,n(l(532)).default)()}},e={};!function l(n){var s=e[n];if(void 0!==s)return s.exports;var t=e[n]={exports:{}};return o[n].call(t.exports,t,t.exports,l),t.exports}(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoidUZBQUEscUJBeUJJLElBQUtBLEVBdkJMQyxRQUFRQyxJQUFJLGVBRVpELFFBQVFDLElBQUkseURBSVpELFFBQVFDLElBQUksV0FHWkQsUUFBUUMsSUFBSSxVQUdaRCxRQUFRQyxJQUFJLFVBR1pELFFBQVFDLFVBRHVCLENBQUMsRUFBRSxJQUlsQ0QsUUFBUUMsVUFEa0IsQ0FBQyxFQUFFLElBSTdCRCxRQUFRQyxVQUQwQixDQUFDLFNBQVMsSUFHNUMsU0FBS0YsR0FDRCxxQkFDQSxpQkFDQSxzQkFDSCxDQUpELENBQUtBLElBQUFBLEVBQUssS0FLVixNQUFNRyxFQUFjSCxFQUFNSSxNQUMxQkgsUUFBUUMsV0FBVSxHQUdsQkQsUUFBUUMsSUFBSSxVQUdaRCxRQUFRQyxJQUFJLGFBR1pELFFBQVFDLFVBRFcsQ0FBQyxHQUdwQixNQUFNRyxFQUFVLENBQUMsRUFBRSxjQUFTQyxFQUFVTixFQUFNSSxPQUM1Q0gsUUFBUUMsV0FBVSxHQUVsQkQsUUFBUUMsSUFBSSx5REFPWkQsUUFBUUMsSUFBSSx3REFjaEIsRUFFQUQsUUFBUUMsSUFBSSx5REFHWixNQUFNSyxFQVNGLFdBQUFDLENBQWFDLEdBQ1JDLEtBQUtELEtBQU9BLENBQ2pCLENBRUEsU0FBQUUsR0FDSVYsUUFBUUMsSUFBSVEsS0FBS0QsS0FDckIsQ0FFQSxxQkFBT0csR0FDRlgsUUFBUUMsSUFBSUssRUFBSU0sVUFDckIsRUFoQk8sRUFBQUEsVUFBWSxNQW1CYixJQUFJTixFQUFJLFNBQ2hCSSxZQUNGSixFQUFJSyxpQkFFSlgsUUFBUUMsSUFBSSx3RCw0SkM3RlosRUFGQSxVQUVBLFUsR0NISVksRUFBMkIsQ0FBQyxHQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCVixJQUFqQlcsRUFDSCxPQUFPQSxFQUFhQyxRQUdyQixJQUFJQyxFQUFTTCxFQUF5QkUsR0FBWSxDQUdqREUsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JKLEdBQVVLLEtBQUtGLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNILEdBR3BFSSxFQUFPRCxPQUNmLENDbkIwQkgsQ0FBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3R5cGVzY3JpcHQtcHJvamVjdC8uL3NyYy9oZWxsby50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC1wcm9qZWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3R5cGVzY3JpcHQtcHJvamVjdC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKXtcbiAgICAvL3ByaW50ZWRcbiAgICBjb25zb2xlLmxvZyhcIkhlbGxvIFdvcmQhXCIpO1xuXG4gICAgY29uc29sZS5sb2coXCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1wiKTtcbiAgICBcbiAgICAvL3R5cGVzXG4gICAgY29uc3QgX2Jvb2xlYW46Ym9vbGVhbiA9IHRydWU7XG4gICAgY29uc29sZS5sb2codHlwZW9mKF9ib29sZWFuKSk7XG5cbiAgICBjb25zdCBfbnVtYmVyOm51bWJlciA9IDMwO1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZihfbnVtYmVyKSk7XG4gICAgXG4gICAgY29uc3QgX3N0cmluZyA6IHN0cmluZyA9ICdmcm9uZCBlbmQgY29kZXInXG4gICAgY29uc29sZS5sb2codHlwZW9mKF9zdHJpbmcpKTtcbiAgICBcbiAgICBjb25zdCBhcnJ5MDEgOiBBcnJheTxudW1iZXI+ID0gWzUsNV07XG4gICAgY29uc29sZS5sb2codHlwZW9mKGFycnkwMSkpO1xuXG4gICAgY29uc3QgYXJyeTAyIDogbnVtYmVyW10gPSBbNiw2XTtcbiAgICBjb25zb2xlLmxvZyh0eXBlb2YoYXJyeTAyKSk7XG5cbiAgICBjb25zdCBfdHVwbGUgOiBbc3RyaW5nLGJvb2xlYW5dID0gWydIZWxsbycsIHRydWVdO1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZihfdHVwbGUpKTtcblxuICAgIGVudW0gQ29sb3Ige1xuICAgICAgICBHUkVFTixcbiAgICAgICAgUkVELFxuICAgICAgICBPUkFOR0VcbiAgICB9XG4gICAgY29uc3QgY29sb3I6Q29sb3IgPSBDb2xvci5HUkVFTjtcbiAgICBjb25zb2xlLmxvZyh0eXBlb2YoY29sb3IpKTtcblxuICAgIGNvbnN0IF9udWxsOm51bGwgPSBudWxsO1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZihfbnVsbCkpO1xuXG4gICAgY29uc3QgX3VuZGVmaWVuZDp1bmRlZmluZWQgPXVuZGVmaW5lZDtcbiAgICBjb25zb2xlLmxvZyh0eXBlb2YoX3VuZGVmaWVuZCkpO1xuXG4gICAgY29uc3QgX29iajpvYmplY3QgPXt9O1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZihfb2JqKSk7XG5cbiAgICBjb25zdCBfYW55OmFueSA9WzEsXCJTdHJpbmdcIix1bmRlZmluZWQsQ29sb3IuR1JFRU5dO1xuICAgIGNvbnNvbGUubG9nKHR5cGVvZihfYW55KSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXCIpO1xuXG4gICAgLy9hcnJ5ICYgdHVwbGVcbiAgICBjb25zdCBhciA6IE51bWJlcltdID1bMSwyLDNdO1xuICAgIGNvbnN0IHR1IDpbbnVtYmVyLHN0cmluZ10gPSBbNjc4LFwiIFwiXTtcblxuXG4gICAgY29uc29sZS5sb2coXCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1wiKTtcblxuICAgIC8vZnVuY3Rpb25zXG4gICAgZnVuY3Rpb24gcHJpbnROYW1lMDEobmFtZTAxOnN0cmluZyk6IHZvaWR7XG4gICAgICAgIGNvbnNvbGUubG9nKG5hbWUwMSk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJpbnROYW1lMDIgPSBmdW5jdGlvbihuYW1lMDI6c3RyaW5nKTp2b2lke1xuICAgICAgICBjb25zb2xlLmxvZyhuYW1lMDIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByaW50TmFtZTAzID0gKG5hbWUwMzpzdHJpbmcpOnZvaWQgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhuYW1lMDMpOyAgIFxuICAgIH1cbn1cbiAgIFxuY29uc29sZS5sb2coXCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1wiKTtcblxuLy9DcmVhdGUgQ2xhc3NcbmNsYXNzIERvZ3tcblxuICAgIC8vc3RhdGljIGluc3RhbmNlXG4gICAgc3RhdGljIGNsYXNzTmFtZSA9IFwiZG9nXCI7XG5cbiAgICAvL2luc3RhbmNlIHZhcmlhYmxlXG4gICAgbmFtZTpzdHJpbmc7XG5cbiAgICAvL2NvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3IgKG5hbWU6c3RyaW5nKXtcbiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgcHJpbnROYW1lKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubmFtZSk7Ly9zbm9ieVxuICAgIH1cblxuICAgIHN0YXRpYyBwcmludENsYXNzTmFtZSgpe1xuICAgICAgICAgY29uc29sZS5sb2coRG9nLmNsYXNzTmFtZSk7Ly9kb2dcbiAgICB9XG59XG5cbmNvbnN0IGQgPSBuZXcgRG9nKCdzbm9ieScpO1xuZC5wcmludE5hbWUoKTtcbkRvZy5wcmludENsYXNzTmFtZSgpO1xuXG5jb25zb2xlLmxvZyhcIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXCIpO1xuXG5cblxuXG5cblxuXG5cblxuXG4iLCJcblxuaW1wb3J0IGhlbGxvIGZyb20gXCIuL2hlbGxvXCI7XG5cbmhlbGxvKCk7IFxuLy9sZXQgZnJvbnRFbmRDb2RlcjpzdHJpbmcgPSBcIkZyb250ZW5kIENvZGVyXCI7XG4vL2Zyb250RW5kQ29kZXIgPSdBQkNEJztcblxuLy9jb25zdCBmcm9udEVuZENvZGVyMDE6c3RyaW5nID0gXCJGcm9udGVuZCBDb2RlciAtIDAxXCIgXG4vL2Zyb250RW5kQ29kZXIwMSA9ICdZWFlaJzsgLy8iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Nik7XG4iXSwibmFtZXMiOlsiQ29sb3IiLCJjb25zb2xlIiwibG9nIiwiY29sb3IiLCJHUkVFTiIsIl9hbnkiLCJ1bmRlZmluZWQiLCJEb2ciLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0aGlzIiwicHJpbnROYW1lIiwicHJpbnRDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9